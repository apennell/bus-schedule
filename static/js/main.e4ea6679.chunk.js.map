{"version":3,"sources":["Schedule/Trip.jsx","Schedule/Bus.jsx","Schedule/Schedule.jsx","serviceWorker.js","index.js"],"names":["Trip","handleSelectTrip","selected","trip","id","startTime","endTime","style","left","width","tripClass","onClick","e","className","convertTime","minsFromMidnight","hour","Math","floor","minutes","slice","Bus","busTrips","index","handleSelectBus","selectedTripId","times","end","start","length","map","key","defaultProps","Schedule","useState","initialTrips","buses","setBuses","setSelectedTripId","busIndex","busesCopy","bus","selectedBus","currentBusIndex","findIndex","find","selectedTripIndex","selectedTrip","splice","overlap","push","stopPropagation","time","trips","reduce","acc","min","max","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e4ea6679.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst propTypes = {\n  handleSelectTrip: PropTypes.func.isRequired,\n  selected: PropTypes.bool.isRequired,\n  trip: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    startTime: PropTypes.number.isRequired,\n    endTime: PropTypes.number.isRequired,\n  }).isRequired,\n};\n\nconst Trip = ({ handleSelectTrip, selected, trip: { id, startTime, endTime } }) => {\n  const style = {\n    left: `${startTime + 155}px`,\n    width: `${endTime - startTime}px`,\n  };\n  const tripClass = `trip${selected ? ' active' : ''}`;\n\n  return (\n    <div onClick={(e) => handleSelectTrip(e, id)} className={tripClass} style ={style}>\n      {id}\n    </div>\n  );\n};\n\nTrip.propTypes = propTypes;\n \nexport default Trip;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Trip from './Trip';\n\nconst propTypes = {\n  busTrips: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    startTime: PropTypes.number,\n    endTime: PropTypes.number,\n  })).isRequired,\n  handleSelectBus: PropTypes.func.isRequired,\n  index: PropTypes.number.isRequired,\n  handleSelectTrip: PropTypes.func,\n  selectedTripId: PropTypes.number,\n  times: PropTypes.shape({\n    end: PropTypes.number,\n    start: PropTypes.number,\n  }),\n};\n\nconst defaultProps = {\n  selectedTripId: null,\n  times: {},\n};\n\nconst convertTime = (minsFromMidnight) => {\n  const hour = Math.floor(minsFromMidnight / 60);\n  const minutes = (`0${minsFromMidnight % 60}`).slice(-2);\n  return `${hour}:${minutes}`;\n};\n\nconst Bus = ({\n  busTrips,\n  index,\n  handleSelectBus,\n  handleSelectTrip,\n  selectedTripId,\n  times: { end, start },\n}) => (\n  <div className={`bus${selectedTripId ? ' active' : ''}`} onClick={() => handleSelectBus(index)}>\n    {busTrips.length ?\n      <p className=\"bus-name\">\n        Bus {index + 1} <small>{convertTime(start)} - {convertTime(end)}</small>\n      </p>\n    :\n      <p className=\"bus-name\">New Bus</p>\n    }\n    {busTrips.map((trip) => (\n      <Trip\n        key={`trip-${trip.id}`}\n        handleSelectTrip={handleSelectTrip}\n        selected={trip.id === selectedTripId}\n        trip={trip}\n      />\n    ))}\n  </div>\n);\n\nBus.propTypes = propTypes;\nBus.defaultProps = defaultProps;\n\nexport default Bus;","import React, { useState } from 'react';\n\nimport initialTrips from './bus-scheduling-input.json';\nimport Bus from './Bus';\nimport './styles.css';\n\nconst Schedule = () => {\n  const [buses, setBuses] = useState(initialTrips.map((trip) => [trip]));\n  const [selectedTripId, setSelectedTripId] = useState(null);\n\n  const handleSelectBus = (busIndex) => {\n    if (!selectedTripId) return;\n\n    const busesCopy = buses.map((bus) => (bus.map((trip) => trip)));\n    const selectedBus = busesCopy[busIndex];\n    const currentBusIndex = buses.findIndex((bus) => (\n      bus.find((trip) => trip.id === selectedTripId)\n    ));\n    const selectedTripIndex = busesCopy[currentBusIndex].findIndex(\n      (trip) => trip.id === selectedTripId\n    );\n    const selectedTrip = busesCopy[currentBusIndex].splice(selectedTripIndex, 1)[0];\n\n    if (selectedBus) {\n      const overlap = (trip) => (\n        selectedTrip.startTime === trip.startTime\n        || (selectedTrip.startTime < trip.startTime && selectedTrip.endTime > trip.startTime)\n        || (selectedTrip.startTime > trip.startTime && selectedTrip.startTime < trip.endTime)\n      );\n      const scheduleConflict = selectedBus.find((trip) => overlap(trip));\n      if (!!scheduleConflict) { return; }\n      selectedBus.push(selectedTrip);\n    } else {\n      busesCopy.push([selectedTrip]);\n    }\n\n    if (busesCopy[currentBusIndex].length === 0) {\n      busesCopy.splice(currentBusIndex, 1);\n    }\n\n    setBuses(busesCopy);\n    setSelectedTripId(null);\n  };\n\n  const handleSelectTrip = (e, id) => {\n    e.stopPropagation();\n    setSelectedTripId(selectedTripId === id ? null : id);\n  };\n\n  const getTimes = (trips) => (\n    trips.reduce((acc, trip) => (\n      {\n        start: Math.min(acc.start, trip.startTime),\n        end: Math.max(acc.end, trip.endTime),\n      }\n    ), { start: 1440, end: 0 })\n  );\n\n  return (\n    <div className=\"container\">\n      <h1>38 Geary Schedule</h1>\n      <div className=\"times\">\n        {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map((time) => (\n          <p style={{ left: `${(time * 60) + 155}px`}}>{time}:00</p>\n        ))}\n      </div>\n      {buses.map((bus, index) => (\n        <Bus\n          index={index}\n          key={`bus-${bus[0].id}`}\n          busTrips={bus}\n          handleSelectBus={handleSelectBus}\n          handleSelectTrip={handleSelectTrip}\n          selectedTripId={selectedTripId}\n          times={getTimes(bus)}\n        />\n      ))}\n      {selectedTripId ?\n        <Bus index={buses.length} busTrips={[]} handleSelectBus={handleSelectBus} />\n      : null}\n    </div>\n  );\n}\n \nexport default Schedule;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Schedule from './Schedule/Schedule';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Schedule />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}